#Spring Framework - Spring Security

Introdução: Spring Security é apenas um grupo de filtros de servlet que ajudam você a adicionar autenticação e autorização ao seu aplicativo

Terminologia:
-Autenticação: Verificação de identidade ao comparar com credenciais armazenadas. "Quem é você"
-Autorização: Permissões do usuário.
-Princípio: Refere-se ao usuário autenticado no momento.
Autoridade concedida: Permissão do usuário autenticado
Função: grupo de permissões do usuário autenticado.

Para implementar deve incluir um starter no arquivo pom.xml

É possível gerar usuários em memória.
Criar uma classe que extends WebSecurityConfigurerAdapter(deprecated)

projeto: dio.spring-security
-> Como cadastrar usuário no application.properties
-> Como cadastrar usuário no via java class
-> Como utilizar rotas(mapping) e roles(PreAuthorize) para personalizar o acesso de cada tipo de usuário.
-> Configure Adaptar: Elimina a necessidade do controller expor os dados de usuário
	-> Não precisa mais do PreAuthorize no controller(boa prática)
	-> Sobrescreve o método configure que passa a receber um (HttpSecurity http)

Utilizando agora banco de dados(utilizando o mesmo projeto: dio.spring-security)

@ElementCollection(fetch=FetchType.EAGER) -> Mapeia uma collection
@CollectionTable(name,joinColumns) -> Cria uma tabela no bd para armazenar essa collection

-> Criado um repository
-> UserDetailService, usada para recuperar dados relacionados ao usuário
-> No WebSecurityConfig foi criado um outro método globalUserDetails que 'aparentemente' realizará a auth. e implementar password encoding.


JWT -JSON Web Token
-É um padrão da internet para a criação de dados com assinatura opcional e/ou criptografia cujo conteúdo contém o JSON que afirma algum número de declarações. Os tokens são assinados usando um segredo privado ou uma chave pública/privada.

Header - Payload - Signature

verificar na pasta SpringBoot-DIO os projetos relacionados à JWT

